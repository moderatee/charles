python学习

python能做什么？
1.爬虫2.大数据spark3.自动化运维和自动化测试
4.web开发：flask，django
5.机器学习tensor flow
6.胶水语言


print('hello,world')
type(1)

2/2=1.0
2//2=1整除

0b10  2进制
0o11  8进制
0x1F  16进制

bin(10)  换算成2进制
int(0b11)换成10进制
hex(888) 换成16进制
oct(0b111)换成8进制

int(True)  1   
bool(1)   True
只有0是false；1是true。  bool(""),bool([])，bool(None)也是false

'''和"""效果一样，可以输入较长的字符串


print(r'')可以让\n失去转义效果，原始字符串 r和R都可以

hello*3  3个hello

"hello"[n] 获取字符串的任一字符
"hello"[1:3]不包含最后一个字符
"hello"[0:-1]hell   
“hello”[6:100]截取到最后一位
“hello”[6:]截取到最后一位  [:-4]


元组 tuple
(1,2,3,4)

type((1))  int

string,list,tuple都属于序列

3 not in (1,2)
3 in (1,2)
len("hello")
max([1,23,6])
ord('w')

{1,2,3}  集合set无重复，无序，不支持索引
{1,2,3}-{1} 求差集
{1,2,3}&{1} 交集
{1,2,3}|{1} 合集

type({})   dict
type(set()) 空集合
{'age':17,'name':'hello'}   字典

{'age':17,'name':'hello'}['age']  获取数据

字典key必须是不可变的类型int，str



变量名首字母不能用数字，只能用字母，数字，下划线，不能是关键字
type=1；

int值类型，list引用类型

b=[1,2]
b.append(3)

2**5=32

1 and 2     会出现2
1 or 2 =1
2 or 1 =2   会出现短路的情况 



a={1,2,3}
b={2,1,3}
a==b  true
a is b false  id不相同

c=(1,2,3)
d=(2,1,3)
c==d  false   元组是序列，是有序的
c is d false  id不相同



isinstance(“hello”,str)判断变量类型
isinstance(“hello”,(str,int，float))


对象的三个特征 id value type

条件控制
mood = False
if mood:
	print("hello")
	#print("hi")
else:
	print(12)

python  input()等待输入  sublime不支持

python  的pass语句
pass：占位
elif：简化代码
while(True):
else:当while结束，else执行

for in ：
    pass
else

break,continue跳出。break会跳出一层循环

for x in range(0,10):
	print(x)

for x in range(0,10,2):步长
	print(x)

for x in range(0,10,2):
	print(x,end=",")
同行打印 0,2,4,6,8,

a=[1,2,3,4,5]
b=a[0:len(a):2]
print(b)

包，模块，类

__init__.py包含此文件才是一个包
__init__.py的命名就是该文件所在的包名

同一文件下导入
import demo
print(demo.question)

import t.demo as m as可以把包名简化

from t.demo import question导入具体的变量
from t import demo  导入模块
from t.demo import * 导入所有的


__all__=['a,'c']    只被导出a,c变量
__all__内置属性，变量

from t.demo import question\
answer
from t.demo import(question,
answer)换行


__init__.py其他文件导入此文件所在目录，会执行此文件
__init__.py也能定义__all__
利用init文件进行批量导入

包和模块不能重复导入
避免循环导入：a导入b，b导入a

result=round(a,3) 保留3位小数

import this 查看python之禅
help(print) 查看print函数定义

定义函数
def add(x,y)
    return x+y

没有return，返回none

def add(x,y):
    return x+y,x*y

s = add(2,8)
print(s)
返回多个值，返回一个元组
a,b=add(3, 5)   序列解包

a,b,c=1,2,3
d=1,2,3  元组

关键字参数
print_hello(1, name='tanggu')

# 正确的默认参数定义方式--> 位置参数在前，默认参数在后
def print_hello(name, sex=1):
    ....

类的定义
class Student():
	name=""
	age=""
	def print_s(self):
		print('name:'+self.name)
		print('age:'+self.age)

stu=Student()
stu.print_s()

def __init__(self,age):
    self.age=age
构造函数
self代表一个对象实例，而与类无关


self.__class__.sum类变量
Student.sum

------------------------------
@classmethod
def plus_sum(cls):
    print(cls.name)
    获取类变量
类和对象都可以调用类方法，对象不推荐

    @staticmethod
	def add(x,y):
		print(x,y)

Student可以不包含name，age，仅仅是一个抽象的概念，在init方法可以用self定义

print(std.__dict__)
print(Student.__dict__)
打印变量

__marking  方法私有
student.__score=-1  新添加的变量，要先定义，才能使用

私有变量会改名
__类名__私有变量名


子类调用父类的构造
def __init__(self,school,name,age):
    self.school=school
    Human.__init__(self,name,age)  self 要传进去
    super.(Student,self).__init__(name,age)
class Student(People)  继承，可以多继承



判断字符串包含python
a.index('Python')>-1
'Python' in a

import re
print(re.findall('as', "adfgas"))

\d 匹配一个数字  [0-9]
\D 匹配一个非数字
re.findall('\d', "adfg2as1")

re.findall('a[cf]c', "adfgas")
出现在[]中是或的关系

re.findall('a[c-f]c', "adfgas")
c-f ：c到f的字符

\w 匹配字母和数字和下划线  [A-Za-z0-9_]
\s匹配空白字符  ' ','\t','\n','\r'


re.findall('[a-z]{3}', "adfgas")  匹配三个字符
re.findall('[a-z]{3,6}', "adfgas") 匹配三到六个字符

re.findall('[a-z]{3,6}?', "python 1111java678php")
返回结果：['pyt', 'hon', 'jav', 'php']
非贪婪 
贪婪与非贪婪

re.findall('python*', "pytho0python1pythonn2") 
*对前面一个字符表示0次或多个，+表示至少出现多次，？表示匹配0次或1次

?在{3,6}范围后表示非贪婪

re.findall('^\d{4,8}$', "1000010000")
^从字符串的开始进行匹配，$从字符串的末尾匹配

re.findall('(Python){3}','10010000")
匹配一组字符

re.findall('c#','PythonC#\nJavaPhp',re.I)
匹配忽略大小写

.匹配除换行符\n之外其他所有字符

re.findall('c#.{1}','PythonC#\nJavaPhp',re.I|re.S)
re.S满足.匹配任意字符

re.sub('c#','GO','PythonC#\nJavaPhp',0)
替换，0的话无限次替换，1替换一次

def conv(val):
	print(val)
	matched=value.group()
	return "!"+'matched'+'!'
r=re.sub('C#', conv, 'C#1233C#kkkkC#len')
print(r)

<_sre.SRE_Match object; span=(0, 2), match='C#'>

re.sub('\d',convert,s)

match  从字符串开始进行匹配，首字母满足匹配，既有值
search 找到第一个

s='life is short ,I use python'
r=re.search('life(.*)'python',s)
print(r.group(1))

group(1)可以匹配()之间的字符

r=re.findall('life(.*)'python',s) 
print(r)

r=re.search('life(.*)'python(.*)python',s)
r.group(0)
r.group(1)
r.group(2)

r.group(0,1,2)
r.groups()

-------------------------
import json
json_str='{"name":"liming","age":30}'
stu=json.loads(json_str)
print(stu)

格式是字典

json_str='[{"name":"liming","age":30},{"name":"xiaohong"}]'
stu=json.loads(json_str)
格式是数组


反序列化：json转换
序列化：转换成json

json.dumps(stu)

from enum import Enum

class VIP(Enum):
	yellow=1
	green=2
枚举类型不可更改值，标签不可重复

VIP.yellow.value   值
VIP.yellow.name    标签
遍历不会打印重复值
for v in VIP:
	print(v)

for v in VIP.__members__.items():
	print(v)

for v in VIP.__members__:
	print(v)

数字转化为枚举类型VIP(1)

IntEnum 强制值都是数字


from enum import IntEnum,unique
@unique
class VIP(IntEnum):
	test=1
	yellow=2
数值不允许重复

把一个函数当做另外一个函数的返回结果

def curve_pre():
	a=25
	def curve(x):
		return a*x*x
	return curve
f=curve_pre()
print(f(2))


如果a在函数curve_pre中未定义，在调用之前定义，不会报错;如果同时存在定义，会使用函数里面的变量
a=3
def curve_pre():
	a=5
	def curve(x):
		#a=1
		return a*x*x
	return curve
f=curve_pre()
a=10
print(f(2))


f.__closure__闭包的变量会存在
f.__closure__[0].cell_contents获取闭包变量的值
只有a=5，才有闭包的值

orgin=0
def go(step):
#	global orgin
	new_pos=orgin+step
#	orgin=new_pos
	return new_pos
print(go(2))
print(go(3))

当orgin在函数中没有定义，能获取外部变量;当orgin在函数中定义，被认为是局部变量
global关键字可以让运行正确，全局变量


def factory(pos):
	def go(step):
		nonlocal pos
		new_pos=pos+step
		pos=new_pos
		return new_pos
	return go
tourist=factory(0)

print(tourist(2))
print(tourist(3))

闭包=函数+环境变量（函数定义的时候）
函数式编程避免使用全局变量

ctrl+end ----跳到文件末尾
f=lambda x,y:x+y
print(f(1,2))

lambda 参数列表 ：表达式

x>y?x:y
x if x>y else y


list_x=[1,2,3,4,5,6]
def square(x):
	return x*x

r=map(square,list_x)    ----映射
print(type(r))    ----map结构
print(list(r))    [1, 4, 9, 16, 25, 36]


th=map(lambda x:x*x,list_x)

th=map(lambda x,y:x*x+y,list_x,list_y) map可变参数，
list_x和list_y的元素个数取决于数字较小的
lambda表达式参数个数和list的个数要一致。

连续计算，连续调用lambda
from functools import reduce
kk=reduce(lambda x,y:x+y,list_x)
print(kk)

kk=reduce(lambda x,y:x+y,list_x,10)
用10去连续加整个序列


filter(lambda x:True if x==1 else False,list_x)
filter(lambda x:x,list_x)
lambda的表达式要求为bool值，可以判断真和假

装饰器
def print_current_time(func):
	print(time.time())
	func()

def decorator(func):
	def wrapper():
		print(time.time())
		func()
	return wrapper

f=decorator(func)
f()
---------------------------
@decorator
def func():
	print("===11=====")

func()
没有改变方法的实现，也没有改变方法的调用，但增加了功能

------------------------------
def decorator(func):
	def wrapper(name):
		print(time.time())
		func(name)
	return wrapper

@decorator
def func(name):
	print("===11====="+name)

func('hello')
支持一个参数的装饰器
--------------------------------

def decorator(func):
	def wrapper(*args,**kw):
		print(time.time())
		func(*args,**kw)
	return wrapper

当函数的参数不确定时，可以使用*args 和**kwargs，*args 没有key值，**kwargs有key值。


sublime安装调试器SublimeRPEL,出现没有对应的功能
解决方案：github下载pacakage功能恢复

$file_basename does not exist
"首选项"→"插件设置"→"SublimeREPL"→"Settings - User"，添加以下内容
    "default_extend_env": {"PATH": "{PATH};C:\\Python27"}

alt+shift+2   显示2个窗口

#day_name=switcher[0]
day_name=switcher.get(6,"unKnown")
字典用get方法更加安全，取不到可以获取默认值


def get_sunday():
	return 'sunday'
def get_monday():
	return 'monday'
def get_default():
	return 'nuknown'

switcher={0:get_sunday,1:get_monday}
day_name=switcher.get(6,get_default)()
print(day_name)

列表推导式
a=[1,2,3,4,5]
b=[i*i for i in a]
b=[i**3 for i in a]
b={i**3 for i in a}
b=[i**3 for i in a if i>=5]
b=[key for key,value in students.items()]字典
print(b)

type(None) ---NoneType

class Test():
	def __len__(self):
		return 0#可以返回bool值和整数，小数和字符串不行
	def __bool__(self):
		return False
test=Test()
if not test:
	print("11111")

自定义对象__len__和__bool__内置方法决定对象的bool取值bool(test)
__len__单存在就调用，__bool__也存在就会调用bool，不调用len

