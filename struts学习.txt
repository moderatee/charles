1.将structs包里面的war包放入wepapps，启动bin可以解压jar包
2.dynamic web project 里面web-inf的lib包放jar包可以不需要build path
3.src下面的代码会变一道web-inf的classes下面，struct.xml在src下


structs管理action通过package管理

配置structs的前端控制器，是一个filter，在web.xml配置
StrutsPrepareAndExecuteFilter

项目启动
eclipse---servers---add  and remove

项目编译
eclipse---windows---preference---valida---将build的√都去掉


struts项目启动后访问不了action
原因：build path路径有问题
struts.xml文件没有在src目录下
validate一直卡住
struts.xml文件命名错误（struct）

<struts>
<package name="demo1" extends="struts-default" namespace="/">
	<action name="hello" class="demo1.HelloAction">
	<result name="success">/demo1/success.jsp</result>
	</action>
</package>
</struts>

action是url,class是对应的类
result是跳转页面

导入源代码
attach source---external forder

struts执行流程：当用户访问某一个Action的时候，先经过核心过滤器，在核心过滤器中dofilter执行一组拦截器（这组拦截器实现部分功能）
，执行目标Action，根据Action的返回值，进行页面跳转

写xml会出现提示
window---preference---xml catalog---增加一组

struts2加载配置文件顺序
init_DefaultProperties()				----加载default.properties
init_TraditionalXmlConfigurations();	----加载struts-default.xml、struts-plugin.xml、struts.xml
init_LegacyStrutsProperties();			----加载struts.properties
init_CustomConfigurationProviders();  ----加载配置提供类
init_FilterInitParameters() ; // [6]		----加载web.xml中过滤器初始化参数
init_AliasStandardObjects() ; // [7]		----加载Bean对象

加载顺序
	default.properties
	struts-default.xml
	struts-plugin.xml
	struts.xml
	struts.properties
	web.xml
	注意：后配置的常量的值会覆盖先配置的常量的值。

	package标签的属性
	name		：包的名称，不能重复，没有具体的含义。
	extends		：继承哪个包，通常值为struts-default。
	namespace	：名称空间，与<action>标签中的name属性共同决定访问路径。
	名称空间有三种写法：
	带名称的名称空间		：namespace=”/aaa” 
	跟名称空间			：namespance=”/”
	默认名称空间			：namespace=””
	abstract		：抽象的，用于其他包的继承。 abstract=“true”


	action标签的属性
	name		：与namespace共同决定访问路径
	class			：Action类的全路径
	method		：执行Action中的哪个方法的方法名，默认值execute
	converter		：用于设置类型转换器

struts常量的配置
	struts.i18n.encoding=UTF-8			----Struts2中所有的post请求的中文乱码不用处理。
	struts.action.extension=action,,		----Struts2请求的默认的扩展名。默认扩展名是.action或者什么都不写。

.do的框架是struts1的默认扩展名

在struts.xml中配置，要尽量写在上面
<constant name="struts.action.extension" value="abc"></constant>

web.xml配置
<init-param>
        <param-name>struts.action.extension</param-name>
        <param-value>xyz</param-value>
</init-param>


引入配置文件---可用于团队多人开发
<include file="demo1/struts.xml"></include>


action类的3种方式

1.简单的pojo类，没有继承，没有实现
2.实现Action
提供了5个常量success，none，error，login登录页面跳转，input表单校验出错
3.继承ActionSupport，推荐使用，提供了数据校验，国际化的操作

Action的访问
		<!--方法method-->
		<action name="userSave" class="com.itheima.struts.demo3.UserAction" method="save"></action>
		
		<!-- 通配符的方式 -->
		<action name="product_*" class="com.itheima.struts.demo3.ProductAction" method="{1}"></action>
		<action name="*_*" class="xxx.{1}" method="{2}"></action>
		
		
		<!-- 开启动态方法访问 -->
		<constant name="struts.enable.DynamicMethodInvocation" value="true"/>
		<!-- 动态方法访问的方式 -->
		<action name="customer" class="com.itheima.struts.demo3.CustomerAction"></action>
		
		/customer!find.action   访问路径   action的name+method的方法名
		
		
常量配置---convention

1）  如果该Action类名包含Action后缀，将该Action类名的Action后缀去掉。否则不做任何处理。
2）  将Action类名的驼峰写法（每个单词首字母大写、其他字母小写的写法）转成中画线写法（所有字母小写，单词与单词之间以中画线隔开）
如：LoginAction映射的Acion的name属性为login，GetBooks映射的Action的name的属性为get-books，AddEmployeeAction映射的Action的name属性为add-employee

struts.convention.package.locators=action  
确定搜索包的路径。只要是结尾为action的包都要搜索。 
struts.convention.package.locators.disable=false 
struts.convention.package.locators.basePackage=com.xxx.web.action 
basePackage按照默认不用配置，如果配置，只会找以此配置开头的包。
struts.convention.result.path=/WEB-INF/ruiri 
这个属性用于约定Action类执行完毕以后返回资源的结果路径，###必须以 "/"开头, 


${pageContext.request.contextPath}用于解决使用相对路径时出现的问题，它的作用是取出所部署项目的名字。
如果使用相对路径则为：“../../bookcover/101.jpg”（相对于当前页面）。

=============================================================================
获取页面参数
		//一、利用Struts2中的对象ActionContext对象.
		ActionContext context = ActionContext.getContext();
		// 调用ActionContext中的方法。
		// 类似于Map<String,String[]> request.getParameterMap();
		Map<String,Object> map = context.getParameters();
		
		
		// 二、向域对象中存入数据
		context.put("reqName", "reqValue");// 相当于request.setAttribute();
		context.getSession().put("sessName", "sessValue"); // 相当于session.setAttribute();
		context.getApplication().put("appName", "appValue"); // 相当于application.setAttribute();
这种方式只能获得代表request、session、application的数据的Map集合，不能操作这些对象的本身的方法



HttpServletRequest request = ServletActionContext.getRequest();
Map<String, String[]> map = request.getParameterMap();

// 向application中保存数据
ServletActionContext.getServletContext().setAttribute("appName", "appValue");
注意：这种方式可以操作域对象的数据，同时也可以获得对象的方法。


三、implements ServletRequestAware,ServletContextAware
重写set方法，设置本地变量


Servlet是单例的，多个程序访问同一个Servlet只会创建一个Servlet的实例。Action是多例的，一次请求，创建一个Action的实例（不会出现线程安全的问题）。

<!-- 全局结果页面 -->
		<global-results>
			<result>/demo1/demo2.jsp</result>
		</global-results>
		
		
result标签
	result标签用于配置页面的跳转。在result标签上有两个属性：
	name属性	：逻辑视图的名称。默认值：success
	type属性	：页面跳转的类型。
	dispatcher	：默认值，请求转发。（Action转发JSP）
	redirect		：重定向。（Action重定向JSP）
	chain		：转发。（Action转发Action）
	redirectAction	：重定向。（Action重定向Action）
	stream		：Struts2中提供文件下载的功能。

采用redirect时，request的值就取不到(一次请求范围内有效)，session和application能获取
重定向地址栏会变化，转发不会




structs数据封装
1.set方法封装，不常用。在继承actionsupport类里面加上属性和set方法

2.提供一个User对象，get和set方法都得有
前端页面  
name="user.username"
name="user.password"

default-stack 拦截器组    拦截器params和conversionError有作用

3.模型驱动

 implements ModelDriven<User>
 	// 模型驱动使用的对象：前提必须手动提供对象的实例
	private User user = new User(); // 手动实例化User.
	@Override
	// 模型驱动需要使用的方法:
	public User getModel() {
		return user;
	}

模型驱动方式最常用的方式：
缺点：只能同时向一个对象中封装数据。
使用第二种可以向多个对象中同时封装数据：student.name，teacher.name
===============================================================
 input逻辑视图---数据转换出错
<global-results>
	<result name="input">/demo2/demo1.jsp</result>
</global-results>

<s:fielderror/>  jsp中添加
==============================================================
封装数据到List集合中
类中添加list属性
	private List<Product> products;
	// 提供集合的set方法:
	public void setProducts(List<Product> products) {
		this.products = products;
	}
	public List<Product> getProducts() {
		return products;
	}

	name="products[0].name"
	name="products[0].price"

name="map['one'].name"
name="map['one'].price"

===============================================
OGNL   对象图导航语言
el:从域对象中获取数据
ognl：调用对象的方法


OgnlContext context=new OgnlContext();
Object root=context.getRoot();
Object obj=Ognl.getValue("'helloworld'.length()", context,root);
Object obj1=Ognl.getValue("@java.lang.Math@random()", context,root);   静态方法@类名@方法

获取对象
context.setRoot(new User("123",12));
Object name=Ognl.getValue("name", context,context.getRoot());

获取text的值
context.put("text", "say hello");
Object text=Ognl.getValue("#text", context,root);

===========================================================
ognl在struts的应用
<%@ taglib uri="/struts-tags" prefix="s"%>
<s:property value="'hello'.length()"/>
struts不支持静态方法访问

<constant name="struts.ognl.allowStaticMethodAccess" value="true"></constant>

===========================================================

valueStack
有两个区域 
root区域  list结构  获取数据不加#
context区域 map结构  获取数据加#


在dofilter时候，创建actioncontext时，将创建valuestack对象，将对象传递给actioncontext

获取valuestack的两种方式
ValueStack valueStack=ActionContext.getContext().getValueStack();
ValueStack valueStack2=(ValueStack) ServletActionContext.getRequest().getAttribute("struts.valuestack");


==========================================================
向valuestack存值---向action中存值，设置action的属性
在action中定义User属性，生成get方法
execute中User user=new User(...);
<s:debug></s:debug>  查看valuestack的结构
在jsp中获取值<s:property value="user.name"/>

--------------------------
向valuestack存值
ValueStack valueStack=ActionContext.getContext().getValueStack();
valueStack.push(user)
<s:property value="name"/>  默认取栈顶取数据

新建了一个map
valueStack.set("name1","charles")
<s:property value="name"/> 
------------------------------
获取root数据
valueStack.set("list",list)
<s:property value="list[0].name"/> 

获取context数据
ServletActionContext.getRequest().setAttribute();
<s:property value="#request.name"/> (application,session)
<s:property value="#parameters.id"/> 接收参数

el也能访问值栈数据，request数据能获取

<%
request.setAttribut();
%>
<s:property value="#request.name" />

<s:iterator value="list">
<s:property value="" />
</s:iterator>

<s:iterator var="i" value="{'aa','bb','cc'}">
<s:property value="i或者#i" />
</s:iterator>


<s:iterator value="#{'aa':1,'bb':2,'cc':3}">
<s:property value="key" />
<s:property value="value" />
</s:iterator>

<s:iterator var="entry" value="#{'aa':1,'bb':2,'cc':3}">
<s:property value="#entry.key" />
<s:property value="#entry.value" />
</s:iterator>

<s:radio list="{'男'，'女'}" name="sex" label="性别"/>
<s:radio list="#{'1':'男'，2':'女'}" name="sex" label="性别"/>

强制识别ognl表达式
<s:textfield name='name' value='%{#request.name}'/>

$在配置文件中使用ognl
欢迎${#session.user.username}

<action name="download1" class="cn.itcast.struts2.demo2.DownloadAction1">
    <result name="success" type="stream">
        <!-- 允许下载的文件的类型：通过ognl表达式获取，Action中提供getContentType方法 --> 
        <param name="contentType">${contentType}</param>
        <!-- 下载头，包括：浏览器显示的文件名，通过ognl表达式获取，Action中提供getFileName方法 -->
        <param name="contentDisposition">attachment;filename=${fileName}</param>
            <!-- 对应的就是Action种的属性，返回流的属性，需要在Action中提供getInputStream方法，该方法返回值类型为java.io.InputStream类型，这是约定的。 -->
            <param name="inputName">inputStream</param>
            <!-- 缓冲区大小设置 -->
        <param name="bufferSize">1024</param>
    </result>
</action>
