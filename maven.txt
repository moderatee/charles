mvn不是内部命令
将%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem加入Path

%MAVEN_HOME不生效，配置M2_HOME

mvn tomcat:run
mvn clean
mvn compile
mvn test
mvn package
mvn install将包放到mvn仓库
mvn deploy 利用mvn deploy命令上传包 到私服


maven---add plugin---compile---
<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>

settings.xml文件中找到有<profile>标签的地方，加上如下配置。配置jdk版本为1.8
<profile>

<id>jdk-1.8</id>    
    <activation>  
        <activeByDefault>true</activeByDefault>    
        <jdk>1.8</jdk>    
    </activation>    
    <properties>    
        <maven.compiler.source>1.8</maven.compiler.source>    
        <maven.compiler.target>1.8</maven.compiler.target>    
        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    
    </properties>    
</profile>



pom文件中增加依赖  dependencies---add

设置jsp文件默认utf-8 :windows--preferences--jsp files--encoding


用maven启动tomcat问题
oader constraint violation: loader (instance of org/apache/jasper/servlet/JasperLoader) previously initiated loading for a different type with name "javax/servlet/http/HttpServletRequest"] with root cause

<groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <version>3.0.1</version>
    <!-- 只在编译和测试中运行 -->
    <scope>provided</scope>  <!--这一句是不是没写，写了就不会造成冲突-->
maven的包和tomcat的包冲突

run as--maven build--tomcat:run

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
				<version>1.1</version>
				<configuration>
				<port>8083</port>
				<path>/helloworld</path>
				<uriEncoding>utf-8</uriEncoding>
				</configuration>
			</plugin>

项目启动路径--http://localhost:8083/helloworld--/HelloServlet


servletApi---provided
jdbc驱动---runtime


我们把crm拆分后，有一个父工程，子工程(crm06_dao, crm06_service, crm06_web)要用到的依赖都可以在父工程(crm06)的pom.xml先定义好，将来子工程在开发的时候就不需要再引坐标了。

依赖的传递
引入struts，会引入其他jar包，是因为struts依赖于一些jar包
service依赖于dao，引入service，会引入service和dao

去除hibernate和struts重复导入的javaassit的包
dependency hierarchy---resolved depencies---右键exclueded maven artifacts
<dependency>
  		<groupId>org.apache.struts</groupId>
  		<artifactId>struts2-core</artifactId>
  		<version>2.3.24</version>
  		<exclusions>
  			<exclusion>
  				<artifactId>javassist</artifactId>
  				<groupId>javassist</groupId>
  			</exclusion>
  		</exclusions>
  	</dependency>

1．第一声明者优先原则
谁先申明，就用谁的。跟坐标代码的顺序有关
由于spring-context在前边以spring-context依赖的spring-beans-4.2.3为准，所以最终spring-beans-4.2.3添加到了工程中。

2．路径近者优先原则
通过引入struts2-spring-plugin，它会引入spring-beans.3.0.5的版本。需要经过的路径为2个节点
通过引入srping-beans-4.2.3，它会引入spring-beans.4.2.3的版本，需要经过的路径为2个节点
如果直接引入spring-beans-4.2.4，只需要经过1个节点
因此不管spring-beans.4.2.4的位置在哪，系统始终都是引入spring-beans.4.2.4的版本

********************************************************
版本锁定
<dependencyManagement>
  <dependencies>
  <dependency>
  		<groupId>junit</groupId>
  		<artifactId>junit</artifactId>
  		<version>4.12</version>
  	</dependency>
  </dependencies>
  </dependencyManagement>

  