django开发中，一个功能木块用一个应用来实现
创建项目
django-admin startproject 项目名

__init__.py: 说明test1是一个python包。
settings.py: 项目的配置文件。
urls.py: 进行url路由的配置。
wsgi.py: web服务器和Django交互的入口。
manage.py:  项目的管理文件。

创建应用
python manage.py startapp 应用名

__init__.py: 说明目录是一个Python模块。
models.py: 写和数据库项目的内容, 设计模型类。
views.py: ，接收请求，进行处理，与M和T进行交互，返回应答。
定义处理函数，视图函数。
tests.py: 写测试代码的文件。
admin.py: 网站后台管理相关的文件。
5.3 应用注册
建立应用和项目之间的联系，需要对应用进行注册。
修改settings.py中的INSTALLED_APPS配置项。

建立应用和项目之间的联系，需要对应用进行注册。
修改settings.py中的INSTALLED_APPS配置项。

python manage.py runserver
============================================

在应用models.py中设计模型类。
必须继承与models.Model类。

1)	生成迁移文件
命令：python manage.py makemigrations
2)	执行迁移生成表
命令：python mange.py migrate
根据迁移文件生成表。
生成表名的默认格式：
应用名_模型类名小写


进入项目shell的命令:
	python manage.py shell


首先导入模型类：
	from booktest.models import BookInfo,HeroInfo
1)	向booktest_bookinfo表中插入一条数据。
	b = BookInfo() #定义一个BookInfo类的对象
	b.btitle ='天龙八部' #定义b对象的属性并赋值
	b.bpub_date = date(1990,10,11) 
	b.save() #才会将数据保存进数据库
2) 查询出booktest_bookinfo表中id为1的数据。
	b = BookInfo.objects.get(id=1) 
3) 在上一步的基础上改变b对应图书的出版日期。
	b.bpub_date = date(1989,10,21)
	b.save() #才会更新表格中的数据
4) 紧接上一步，删除b对应的图书的数据。
	b.delete() #才会删除
6) 查询图书表里面的所有内容。
	BookInfo.objects.all()
	HeroInfo.objects.all()

hbook=models.ForeignKey('BookInfo',on_delete=models.CASCADE)

h.hbook = b2  #给关系属性赋值，英雄对象所属的图书对象

1) 查询出id为2的图书中所有英雄人物的信息。
	b = BookInfo.objects.get(id=2)
	b.heroinfo_set.all() #查询出b图书中所有英雄人物的信息
==================================================
1)本地化--settings.py
#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
#TIME_ZONE = 'UTC'
2)	创建管理员
命令：python manage.py createsuperuser

http://127.0.0.1:8000/admin/
charles
ruan0719

3）在应用下的admin.py中注册模型类
from booktest.models import BookInfo
# Register your models here.
admin.site.register(BookInfo)

页面显示BookInfo object
str(b) __str__

4）自定义管理页面显示数据
class BookInfoAdmin(admin.ModelAdmin):
    list_display = ["id","btitle","bpub_date"]
admin.site.register(BookInfo,BookInfoAdmin)



8.1视图函数的使用
1) 定义视图函数
视图函数定义在views.py中。
例：
		def index(request):
			#进行处理。。。
			return HttpResponse('hello python')
视图函数必须有一个参数request，进行处理之后，需要返回一个HttpResponse


url配置的目的是让建立url和视图函数的对应关系。
url函数有两个参数，第一个参数是一个正则表达式，第二个是对应的处理动作。
配置url时，有两种语法格式：
a) url(正则表达式，视图函数名)
b) url(正则表达式，include(应用中的urls文件))


当用户输入如http://127.0.0.1:8000/aindex时，去除域名和最前面的/，剩下aindex，拿aindex字符串到项目的urls文件中进行匹配，配置成功之后，去除匹配的a字符，那剩下的index字符串继续到应用的urls文件中进行正则匹配，匹配成功之后执行视图函数index，index视图函数返回内容hello python给浏览器来显示。

项目urls.py配置
urlpatterns = [
    path('admin/', admin.site.urls),
    path('aa/',include('booktest.urls')),
]

应用urls.py配置
urlpatterns=[
    path('index/', views.index),
]

views.py配置
def index(request):
    return HttpResponse('666666，真香')

http://127.0.0.1:8000/aa/index/


使用模板文件
a)	加载模板文件
去模板目录下面获取html文件的内容，得到一个模板对象。
b)	定义模板上下文
向模板文件传递数据。
c)	模板渲染
得到一个标准的html内容。
def index(request):
    # return HttpResponse('666666，真香')
    temp=loader.get_template('booktest/index.html')
    context={"content":"hello","list":list(range(1,10))}
    res_html=temp.render(context)
    return HttpResponse(res_html)

settings配置TEMPLATES
'DIRS': [os.path.join(BASE_DIR),'templates']

{{ content }}

{% for i in list %}
<li>{{ i }}</li>
{% endfor %}


re_path(r'books/(\d+)',views.book_detail)
2.0django使用正则，(\d+)表示一组，可以传参到views


<li>
    {{ hero.hname }}  {{ hero.hcomment }}
{% empty %}
    没有信息
{% endfor %}


[06/Nov/2018 13:00:55] "GET /create/ HTTP/1.1" 302 0
[06/Nov/2018 13:00:55] "GET /index/ HTTP/1.1" 200 324
页面重定向：服务器不返回页面，而是告诉浏览器再去请求其他的url地址。


使用时需要引入django.db.models包，字段类型如下：
类型	描述
AutoField	自动增长的IntegerField，通常不用指定，不指定时Django会自动创建属性名为id的自动增长属性。
BooleanField	布尔字段，值为True或False。
NullBooleanField	支持Null、True、False三种值。
CharField(max_length=最大长度)	字符串。参数max_length表示最大字符个数。
TextField	大文本字段，一般超过4000个字符时使用。
IntegerField	整数
DecimalField(max_digits=None, decimal_places=None)	十进制浮点数。参数max_digits表示总位。参数decimal_places表示小数位数。
FloatField	浮点数。参数同上
DateField：([auto_now=False, auto_now_add=False])	日期。
1)参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于"最后一次修改"的时间戳，它总是使用当前日期，默认为false。
2) 参数auto_now_add表示当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false。
3)参数auto_now_add和auto_now是相互排斥的，组合将会发生错误。
TimeField	时间，参数同DateField。
DateTimeField	日期时间，参数同DateField。
FileField	上传文件字段。
ImageField	继承于FileField，对上传的内容进行校验，确保是有效的图片。


通过选项实现对字段的约束，选项如下：
选项名	描述
default	默认值。设置默认值。
primary_key	若为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用。
unique	如果为True, 这个字段在表中必须有唯一值，默认值是False。
db_index	若值为True, 则在表中会为此字段创建索引，默认值是False。
db_column	字段的名称，如果未指定，则使用属性的名称。
null	如果为True，表示允许为空，默认值是False。
blank	如果为True，则该字段允许为空白，默认值是False。

对比：null是数据库范畴的概念，blank是后台管理页面表单验证范畴的


查询函数
通过模型类.objects属性可以调用如下函数，实现对模型类对应的数据表的查询。
函数名	功能	返回值	说明
get	返回表中满足条件的一条且只能有一条数据。	返回值是一个模型类对象。	参数中写查询条件。
1)	如果查到多条数据，则抛异常MultipleObjectsReturned。
2)查询不到数据，则抛异常：DoesNotExist。
all	返回模型类对应表格中的所有数据。	返回值是QuerySet类型	查询集
filter	返回满足条件的数据。	返回值是QuerySet类型	参数写查询条件。
exclude	返回不满足条件的数据。	返回值是QuerySet类型	参数写查询条件。
order_by	对查询结果进行排序。	返回值是QuerySet类型	参数中写根据哪些字段进行排序。
================================================================
get示例：
例：查询图书id为3的图书信息。
all方法示例：
例：查询图书所有信息。
filter方法示例：
条件格式：
	模型类属性名__条件名=值
查询图书评论量为34的图书的信息：
a)判等 条件名:exact。
例：查询编号为1的图书。
BookInfo.objects.get(id=1)
b)模糊查询
例：查询书名包含'传'的图书。contains
BookInfo.objects.filter(btitle__contains='传')
例：查询书名以'部'结尾的图书 endswith 开头:startswith
BookInfo.objects.filter(btitle__endswith='部')
c)空查询 isnull
例：查询书名不为空的图书。isnull 
select * from booktest_bookinfo where btitle is not null;
BookInfo.objects.filter(btitle__isnull=False)
d)范围查询 in
例：查询id为1或3或5的图书。
select * from booktest_bookinfo where id in (1,3,5);
BookInfo.objects.filter(id__in = [1,3,5])
e)比较查询 gt(greate than) lt(less  than) gte(equal) 大于等于
lte 小于等于
例：查询id大于3的图书。
Select * from booktest_bookinfo where id>3;
BookInfo.objects.filter(id__gt=3)
f)日期查询
例：查询1980年发表的图书。
BookInfo.objects.filter(bpub_date__year=1980)
例：查询1980年1月1日后发表的图书。
from datetime import date
BookInfo.objects.filter(bpub_date__gt=date(1980,1,1))
exclude方法示例：
例：查询id不为3的图书信息。
BookInfo.objects.exclude(id=3)
order_by方法示例：
作用：进行查询结果进行排序。
例：查询所有图书的信息，按照id从小到大进行排序。
BookInfo.objects.all().order_by('id')
例：查询所有图书的信息，按照id从大到小进行排序。
BookInfo.objects.all().order_by('-id')
例：把id大于3的图书信息按阅读量从大到小排序显示。
BookInfo.objects.filter(id__gt=3).order_by('-bread')

================================================================
Q对象
作用：用于查询时条件之间的逻辑关系。not and or，可以对Q对象进行&|~操作。
使用之前需要先导入：
from django.db.models import Q
例：查询id大于3且阅读量大于30的图书的信息。
BookInfo.objects.filter(id__gt=3, bread__gt=30)
BookInfo.objects.filter(Q(id__gt=3)&Q(bread__gt=30))
例：查询id大于3或者阅读量大于30的图书的信息。
BookInfo.objects.filter(Q(id__gt=3)|Q(bread__gt=30))
例：查询id不等于3图书的信息。
BookInfo.objects.filter(~Q(id=3))


6.	F对象
作用：用于类属性之间的比较。
使用之前需要先导入：
from django.db.models import F
例：查询图书阅读量大于评论量图书信息。
BookInfo.objects.filter(bread__gt=F('bcomment'))
例：查询图书阅读量大于2倍评论量图书信息。
BookInfo.objects.filter(bread__gt=F('bcomment')*2)


aggregate：调用这个函数来使用聚合。 返回值是一个字典
使用前需先导入聚合类： 
from django.db.models import Sum,Count,Max,Min,Avg
例：查询所有图书的数目。
BookInfo.objects.all().aggregate(Count('id'))
{'id__count': 5}
例：查询所有图书阅读量的总和。
BookInfo.objects.aggregate(Sum('bread'))
{'bread__sum': 126}
count函数 返回值是一个数字
作用：统计满足条件数据的数目。
例：统计所有图书的数目。
BookInfo.objects.all().count()
BookInfo.objects.count()
例：统计id大于3的所有图书的数目。
BookInfo.objects.filter(id__gt=3).count()
-----------------------------------------------------


9.1 查询集特性
1）	惰性查询：只有在实际使用查询集中的数据的时候才会发生对数据库的真正查询。
2）	缓存：当使用的是同一个查询集时，第一次使用的时候会发生实际数据库的查询，然后把结果缓存起来，之后再使用这个查询集时，使用的是缓存中的结果。


可以对一个查询集进行取下标或者切片操作来限制查询集的结果。
对一个查询集进行切片操作会产生一个新的查询集，下标不允许为负数。
取出查询集第一条数据的两种方式:b[0]或b[0:1].get()

===================================================================
1）	一对多关系
例：图书类-英雄类 
models.ForeignKey() 定义在多的类中。
2）	多对多关系
例：新闻类-新闻类型类 体育新闻 国际新闻
models.ManyToManyField() 定义在哪个类中都可以。
3）	一对一关系
例：员工基本信息类-员工详细信息类. 员工工号
models.OneToOneField定义在哪个类中都可以。
*********************************************************************

例：查询图书信息，要求图书关联的英雄的描述包含'八'。
BookInfo.objects.filter(heroinfo__hcomment__contains='八')
例：查询图书信息，要求图书中的英雄的id大于3.
BookInfo.objects.filter(heroinfo__id__gt=3)
例：查询书名为“天龙八部”的所有英雄。
HeroInfo.objects.filter(hbook__btitle='天龙八部')
通过多类的条件查询一类的数据：
	一类名.objects.filter(多类名小写__多类属性名__条件名) 
通过一类的条件查询多类的数据：
	多类名.objects.filter(关联属性__一类属性名__条件名)



我们把多类中定义的建立关联的类属性叫做关联属性。
例：查询id为1的图书关联的英雄的信息。
	b=BookInfo.objects.get(id=1)
	b.heroinfo_set.all()
通过模型类查询：
	HeroInfo.objects.filter(hbook__id=1)
例：查询id为1的英雄关联的图书信息。
	h = HeroInfo.objects.get(id=1)
	h.hbook
通过模型类查询：
	BookInfo.objects.filter(heroinfo__id=1)


*********************************************************************
[问题]__init__() missing 1 required positional argument: 'on_delete'
外键上添加on_delete=models.CASCADE,

自关联

class Areainfo(models.Model):
    atitle=models.CharField(max_length=20)
    aParent=models.ForeignKey('self',null=True,blank=True,on_delete=models.CASCADE,)

SELECT * from booktest_areainfo where aParent_id=440000

def areas(request):
    area=Areainfo.objects.get(atitle='广州市')
    parent=area.aParent
    children=area.areainfo_set.all()
    return render(request, 'booktest/areas.html', {"parent": parent,"children":children,"area":area})
*********************************************************************

14.	管理器
BookInfo.objects.all()->objects是一个什么东西呢？
答：objects是Django帮我自动生成的管理器对象，通过这个管理器可以实现对数据的查询。
objects是models.Manger类的一个对象。自定义管理器之后Django不再帮我们生成默认的objects管理器。
book=models.Manager()
BookInfo.book.all()



自定义管理器类的应用场景
1）	改变查询的结果集。
比如调用BookInfo.books.all()返回的是没有删除的图书的数据。
objects=BookInfoManager()
class BookInfoManager(models.Manager):
    def all(self):
        books=super().all()
        books= books.filter(isDelete=False)
        return books
2）	添加额外的方法。
管理器类中定义一个方法帮我们操作模型类对应的数据表。
使用self.model()就可以创建一个跟自定义管理器对应的模型类对象。

@classmethod
    def create_book(cls,btitle,bpub_date):
        obj=cls()
        obj.btitle=btitle
        obj.bpub_date=bpub_date
        obj.save()
        return obj
在模型类中增加静态方法，在管理器中定义可以
BookInfo.objects.craete_book()


 BookInfo.objects.create(btitle='tets',bpub_date='1990-1-1')默认封装create方法
 在管理器中，model_class=self.model ,book=model_class()

 Django默认生成的表名：
	应用名小写_模型类名小写。
元选项：
需要在**模型类**中定义一个元类Meta,在里面定义一个类属性db_table就可以指定表名。
class Meta:
    da_table="bookinfo"
